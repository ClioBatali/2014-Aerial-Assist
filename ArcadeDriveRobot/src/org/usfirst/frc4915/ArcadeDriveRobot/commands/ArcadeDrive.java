// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4915.ArcadeDriveRobot.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4915.ArcadeDriveRobot.Robot;
/**
 *
 */
public class ArcadeDrive extends Command {
    public Joystick joystickDrive;
    private double joystickX;
    private double joystickY;
    // Makes our throttle from the original [-1,1] to [.1,1]
    public ArcadeDrive() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        joystickDrive = Robot.oi.getJoystickDrive();
        joystickX = joystickDrive.getAxis(Joystick.AxisType.kX);
        joystickY = joystickDrive.getAxis(Joystick.AxisType.kY);
        Robot.driveTrain.joystickThrottle = Robot.driveTrain.modifyThrottle();
        if ((Math.abs(joystickX) < 0.075) && (Math.abs(joystickY) < 0.075)) {
            Robot.driveTrain.stop();
        } else {
            Robot.driveTrain.arcadeDrive(joystickDrive);
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.stop();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
